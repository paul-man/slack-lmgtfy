                  mkcalendar: [Function],
                  mkcol: [Function],
      rawHeaders: 
         _pendingData: null,
         _paused: false,
         connection: 'close',
         'connect-time': '1',
                  move: [Function],
                  notify: [Function],
                  patch: [Function],
       [ 'Host',
                  options: [Function],
         'close',
                  post: [Function],
                  propfind: [Function],
         'slack-lmgtfy.herokuapp.com',
         'User-Agent',
         'Connection',
         'gzip,deflate',
         'application/json,*/*',
         'Content-Type',
                  proppatch: [Function],
                  purge: [Function],
         'd92796af-347a-4ee1-aeb1-020ad0b91696',
         'X-Request-Id',
         'X-Forwarded-For',
                  put: [Function],
                  rebind: [Function],
         'https',
                  report: [Function],
         '443',
         'Via',
                  search: [Function],
         'Connect-Time',
         '1',
         _pendingEncoding: '',
         read: [Function],
         'user-agent': 'Slackbot 1.0 (+https://api.slack.com/robots)',
         'x-request-start': '1494222002355',
         'Accept-Encoding',
         'X-Forwarded-Proto',
                  subscribe: [Function],
                  trace: [Function],
         'X-Request-Start',
         '0',
                  unbind: [Function],
                  unlink: [Function],
         _httpMessage: [Circular] },
         accept: 'application/json,*/*',
         'content-length': '299' },
         'Accept',
         'X-Forwarded-Port',
         'Content-Length',
         '299' ],
      trailers: {},
                  unlock: [Function],
      url: '/lmgtfy',
      upgrade: false,
                  unsubscribe: [Function],
                  setMaxListeners: [Function: setMaxListeners],
         'Slackbot 1.0 (+https://api.slack.com/robots)',
         '54.209.231.248',
         '1494222002355',
                  getMaxListeners: [Function: getMaxListeners],
         'application/x-www-form-urlencoded',
         '1.1 vegur',
      rawTrailers: [],
                  emit: [Function: emit],
         'Total-Route-Time',
                  addListener: [Function: addListener],
                  render: [Function: render],
                  all: [Function: all],
                  del: [Function],
                  on: [Function: addListener],
                  listen: [Function: listen],
                  response: ServerResponse { app: [Circular] },
                  prependListener: [Function: prependListener],
                  request: IncomingMessage { app: [Circular] },
                  once: [Function: once],
                  cache: {},
                  engines: {},
                  prependOnceListener: [Function: prependOnceListener],
                  removeListener: [Function: removeListener],
                  settings: 
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  listenerCount: [Function: listenerCount],
                  eventNames: [Function: eventNames],
                  init: [Function: init],
                   { 'x-powered-by': true,
                  defaultConfiguration: [Function: defaultConfiguration],
                  lazyrouter: [Function: lazyrouter],
                  handle: [Function: handle],
                  use: [Function: use],
                  route: [Function: route],
                     etag: 'weak',
                  engine: [Function: engine],
                  param: [Function: param],
                  set: [Function: set],
                  path: [Function: path],
                     'etag fn': [Function: wetag],
                  enabled: [Function: enabled],
                     env: 'production',
                  disabled: [Function: disabled],
                     'query parser': 'extended',
                  enable: [Function: enable],
                  disable: [Function: disable],
                  acl: [Function],
                  bind: [Function],
                  checkout: [Function],
                  connect: [Function],
            _socketEnd: [Function: onSocketEnd],
                     'query parser fn': [Function: parseExtendedQueryString],
                  copy: [Function],
                     'subdomain offset': 2,
                  delete: [Function],
                  get: [Function],
                  head: [Function],
                  link: [Function],
                     'trust proxy': false,
                     'trust proxy fn': [Function: trustNone],
                  lock: [Function],
            drain: [ [Function: ondrain], [Function: socketOnDrain] ],
                  'm-search': [Function],
                     view: [Function: View],
                  merge: [Function],
                     views: '/app/views',
                  mkactivity: [Function],
            timeout: [Function],
                  mkcalendar: [Function],
                     'jsonp callback name': 'callback',
                  mkcol: [Function],
                     'view cache': true },
                  move: [Function],
                  _eventsCount: 1,
                  notify: [Function],
                  options: [Function],
                  patch: [Function],
                  post: [Function],
                  propfind: [Function],
                  proppatch: [Function],
                  purge: [Function],
                   { settings: 
                  put: [Function],
                  locals: 
                      { 'x-powered-by': true,
            error: [Function: socketOnError],
                        etag: 'weak',
                  rebind: [Function],
                        'etag fn': [Function: wetag],
            close: 
                  report: [Function],
                  search: [Function],
                  subscribe: [Function],
                  trace: [Function],
                  unbind: [Function],
             [ [Function: serverSocketCloseListener],
                        env: 'production',
                  unlink: [Function],
                        'query parser': 'extended',
                  unlock: [Function],
                        'subdomain offset': 2,
                  unsubscribe: [Function],
               [Function: onServerResponseClose] ],
                  all: [Function: all],
                        'query parser fn': [Function: parseExtendedQueryString],
                        'trust proxy': false,
                  del: [Function],
                  render: [Function: render],
                  listen: [Function: listen],
                  request: IncomingMessage { app: [Circular] },
            data: [Function: socketOnData],
                        view: [Function: View],
                  response: ServerResponse { app: [Circular] },
                        views: '/app/views',
                        'jsonp callback name': 'callback',
                        'view cache': true } },
                  cache: {},
            resume: [Function: onSocketResume],
                        'trust proxy fn': [Function: trustNone],
                  engines: {},
            pause: [Function: onSocketPause] },
                   { [Function: router]
                  settings: 
                  mountpath: '/',
                   { 'x-powered-by': true,
                  _router: 
                     params: {},
                     _params: [],
                     etag: 'weak',
                     caseSensitive: false,
         _eventsCount: 10,
                     strict: false,
                     'etag fn': [Function: wetag],
         _writableState: 
                     mergeParams: undefined,
                     stack: 
         _maxListeners: undefined,
            objectMode: false,
                      [ Layer {
          WritableState {
                     env: 'production',
            finished: false,
            highWaterMark: 16384,
                     'query parser': 'extended',
            length: 0,
            corked: 0,
                          handle: [Function: query],
            needDrain: false,
            ending: false,
            ended: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
                     'query parser fn': [Function: parseExtendedQueryString],
            writing: false,
            sync: true,
                          params: {},
                          name: 'query',
                          keys: [],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                          path: '',
                     'subdomain offset': 2,
                          route: undefined },
                        Layer {
                     'trust proxy': false,
            bufferProcessing: false,
                          handle: [Function: expressInit],
                     'trust proxy fn': [Function: trustNone],
                          name: 'expressInit',
                     view: [Function: View],
                          params: {},
                          path: '',
                     views: '/app/views',
            onwrite: [Function],
                          keys: [],
                     'jsonp callback name': 'callback',
            writelen: 0,
            writecb: null,
                          route: undefined },
            pendingcb: 0,
            errorEmitted: false,
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
            bufferedRequest: null,
            lastBufferedRequest: null,
            prefinished: false,
            bufferedRequestCount: 0,
                     'view cache': true },
                        Layer {
                  _eventsCount: 1,
                  locals: 
                   { settings: 
                          handle: [Function: urlencodedParser],
                      { 'x-powered-by': true,
                        etag: 'weak',
                        'etag fn': [Function: wetag],
                          name: 'urlencodedParser',
                        env: 'production',
                        'query parser': 'extended',
            corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                          params: {},
                        'query parser fn': [Function: parseExtendedQueryString],
         writable: true,
                        'subdomain offset': 2,
                        'trust proxy': false,
                          path: '',
                        'trust proxy fn': [Function: trustNone],
         allowHalfOpen: true,
                        view: [Function: View],
                        views: '/app/views',
                        'jsonp callback name': 'callback',
                        'view cache': true } },
                  mountpath: '/',
                  _router: 
                   { [Function: router]
                          keys: [],
                     params: {},
                          route: undefined },
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                     _params: [],
                     caseSensitive: false,
         destroyed: false,
                        Layer {
                     mergeParams: undefined,
                     strict: false,
                     stack: 
                      [ Layer {
                          handle: [Function: query],
                          handle: [Function: bound dispatch],
                          name: 'query',
         _bytesDispatched: 0,
                          name: 'bound dispatch',
                          params: {},
         _sockname: null,
         _pendingData: null,
                          path: '',
                          params: {},
                          keys: [],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                          path: '/lmgtfy',
                          route: undefined },
         _pendingEncoding: '',
                          keys: [],
                        Layer {
                          regexp: { /^\/lmgtfy\/?$/i fast_star: false, fast_slash: false },
         server: 
                          route: 
                          handle: [Function: expressInit],
                          name: 'expressInit',
                           Route {
                          params: {},
                          path: '',
          Server {
                             path: '/lmgtfy',
            domain: null,
                { [Function: app]
                  _maxListeners: undefined,
            _events: 
                          keys: [],
                  getMaxListeners: [Function: getMaxListeners],
             { request: 
                              [ Layer {
                             stack: 
                  domain: undefined,
                  _events: { mount: [Function: onmount] },
                                  handle: [Function],
                  setMaxListeners: [Function: setMaxListeners],
                  emit: [Function: emit],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                                  params: undefined,
                          route: undefined },
                                  name: '<anonymous>',
                                  path: undefined,
                        Layer {
                          handle: [Function: urlencodedParser],
                                  keys: [],
                          name: 'urlencodedParser',
                                  regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                          params: {},
                  addListener: [Function: addListener],
                             methods: { post: true } } } ] } },
                                  method: 'post' } ],
                          path: '',
                  on: [Function: addListener],
                          keys: [],
            _eventsCount: 2,
            _maxListeners: undefined,
               connection: [Function: connectionListener] },
                  once: [Function: once],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                  removeAllListeners: [Function: removeAllListeners],
                          route: undefined },
                  prependListener: [Function: prependListener],
                        Layer {
                  listenerCount: [Function: listenerCount],
                  removeListener: [Function: removeListener],
                          handle: [Function: bound dispatch],
                  prependOnceListener: [Function: prependOnceListener],
                  listeners: [Function: listeners],
                          name: 'bound dispatch',
                          params: {},
                          path: '/lmgtfy',
            _handle: 
            _connections: 1,
             TCP {
                          keys: [],
               bytesRead: 0,
                          regexp: { /^\/lmgtfy\/?$/i fast_star: false, fast_slash: false },
                  eventNames: [Function: eventNames],
                          route: 
               _externalStream: {},
               reading: false,
                           Route {
                  init: [Function: init],
                             path: '/lmgtfy',
               fd: 10,
                             stack: 
                              [ Layer {
                                  handle: [Function],
                                  name: '<anonymous>',
               onread: null,
                  defaultConfiguration: [Function: defaultConfiguration],
               owner: [Circular],
               onconnection: [Function: onconnection],
                  lazyrouter: [Function: lazyrouter],
                                  params: undefined,
            _usingSlaves: false,
            _slaves: [],
               writeQueueSize: 0 },
                                  path: undefined,
                  handle: [Function: handle],
                                  keys: [],
                                  regexp: { /^\/?$/i fast_star: false, fast_slash: false },
            _unref: false,
                                  method: 'post' } ],
            allowHalfOpen: true,
                             methods: { post: true } } } ] } },
               connection: [Function: connectionListener] },
                  use: [Function: use],
            _eventsCount: 2,
                  engine: [Function: engine],
            httpAllowHalfOpen: false,
            pauseOnConnect: false,
                  route: [Function: route],
            _maxListeners: undefined,
            _pendingResponseData: 0,
                  param: [Function: param],
            _connectionKey: '6::::4799' },
            timeout: 120000,
            _connections: 1,
                  set: [Function: set],
             TCP {
            _handle: 
               _externalStream: {},
               bytesRead: 0,
               fd: 10,
         _server: 
               reading: false,
          Server {
               owner: [Circular],
               onread: null,
            domain: null,
               onconnection: [Function: onconnection],
                  path: [Function: path],
            _events: 
             { request: 
                  domain: undefined,
               writeQueueSize: 0 },
                { [Function: app]
                  enabled: [Function: enabled],
                  _maxListeners: undefined,
                  setMaxListeners: [Function: setMaxListeners],
                  disabled: [Function: disabled],
                  _events: { mount: [Function: onmount] },
                  enable: [Function: enable],
                  getMaxListeners: [Function: getMaxListeners],
                  emit: [Function: emit],
            _usingSlaves: false,
            _slaves: [],
            _unref: false,
                  disable: [Function: disable],
                  addListener: [Function: addListener],
            allowHalfOpen: true,
                  on: [Function: addListener],
                  prependListener: [Function: prependListener],
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
                  acl: [Function],
                  prependOnceListener: [Function: prependOnceListener],
                  once: [Function: once],
                  removeAllListeners: [Function: removeAllListeners],
                  bind: [Function],
            timeout: 120000,
                  removeListener: [Function: removeListener],
                  checkout: [Function],
            _pendingResponseData: 0,
            _connectionKey: '6::::4799' },
                  connect: [Function],
                  listeners: [Function: listeners],
         _server: 
          Server {
                  copy: [Function],
                  eventNames: [Function: eventNames],
                  init: [Function: init],
                  listenerCount: [Function: listenerCount],
             { request: 
                  delete: [Function],
                  defaultConfiguration: [Function: defaultConfiguration],
                  lock: [Function],
                  get: [Function],
            _events: 
            domain: null,
                  head: [Function],
                  link: [Function],
                  domain: undefined,
                  lazyrouter: [Function: lazyrouter],
                  _maxListeners: undefined,
                  use: [Function: use],
                  setMaxListeners: [Function: setMaxListeners],
                  getMaxListeners: [Function: getMaxListeners],
                  'm-search': [Function],
                  handle: [Function: handle],
                  emit: [Function: emit],
                  prependListener: [Function: prependListener],
                  route: [Function: route],
                { [Function: app]
                  engine: [Function: engine],
                  param: [Function: param],
                  prependOnceListener: [Function: prependOnceListener],
                  _events: { mount: [Function: onmount] },
                  path: [Function: path],
                  merge: [Function],
                  mkactivity: [Function],
                  enabled: [Function: enabled],
                  set: [Function: set],
                  removeAllListeners: [Function: removeAllListeners],
                  listeners: [Function: listeners],
                  mkcol: [Function],
                  listenerCount: [Function: listenerCount],
                  eventNames: [Function: eventNames],
                  mkcalendar: [Function],
                  on: [Function: addListener],
                  post: [Function],
                  purge: [Function],
                  move: [Function],
                  disabled: [Function: disabled],
                  notify: [Function],
                  addListener: [Function: addListener],
                  init: [Function: init],
                  options: [Function],
                  patch: [Function],
                  propfind: [Function],
                  once: [Function: once],
                  proppatch: [Function],
                  put: [Function],
                  enable: [Function: enable],
                  removeListener: [Function: removeListener],
                  acl: [Function],
                  lazyrouter: [Function: lazyrouter],
                  disable: [Function: disable],
                  checkout: [Function],
                  use: [Function: use],
                  bind: [Function],
                  connect: [Function],
                  param: [Function: param],
                  engine: [Function: engine],
                  rebind: [Function],
                  set: [Function: set],
                  copy: [Function],
                  delete: [Function],
                  path: [Function: path],
                  enable: [Function: enable],
                  defaultConfiguration: [Function: defaultConfiguration],
                  disabled: [Function: disabled],
                  enabled: [Function: enabled],
                  get: [Function],
                  report: [Function],
                  handle: [Function: handle],
                  head: [Function],
                  link: [Function],
                  search: [Function],
                  lock: [Function],
                  acl: [Function],
                  subscribe: [Function],
                  checkout: [Function],
                  unbind: [Function],
                  connect: [Function],
                  route: [Function: route],
                  bind: [Function],
                  trace: [Function],
                  'm-search': [Function],
                  unsubscribe: [Function],
                  del: [Function],
                  merge: [Function],
                  unlink: [Function],
                  unlock: [Function],
                  mkactivity: [Function],
                  all: [Function: all],
                  render: [Function: render],
                  listen: [Function: listen],
                  copy: [Function],
                  mkcol: [Function],
                  delete: [Function],
                  mkcalendar: [Function],
                  link: [Function],
                  move: [Function],
                  'm-search': [Function],
                  head: [Function],
                  get: [Function],
                  mkactivity: [Function],
                  request: IncomingMessage { app: [Circular] },
                  notify: [Function],
                  mkcalendar: [Function],
                  mkcol: [Function],
                  options: [Function],
                  post: [Function],
                  response: ServerResponse { app: [Circular] },
                  move: [Function],
                  patch: [Function],
                  cache: {},
                  proppatch: [Function],
                  purge: [Function],
                  disable: [Function: disable],
                  lock: [Function],
                  propfind: [Function],
                  engines: {},
                  put: [Function],
                  rebind: [Function],
                  patch: [Function],
                  settings: 
                   { 'x-powered-by': true,
                  report: [Function],
                     'etag fn': [Function: wetag],
                     views: '/app/views',
                  merge: [Function],
                     'view cache': true },
                     etag: 'weak',
                  search: [Function],
                     env: 'production',
                     'query parser': 'extended',
                     'query parser fn': [Function: parseExtendedQueryString],
                     'subdomain offset': 2,
                  propfind: [Function],
                     view: [Function: View],
                  _eventsCount: 1,
                  purge: [Function],
                  subscribe: [Function],
                  put: [Function],
                  rebind: [Function],
                  trace: [Function],
                  report: [Function],
                  unbind: [Function],
                  notify: [Function],
                     'trust proxy': false,
                  trace: [Function],
                  locals: 
                  unlink: [Function],
                  unlink: [Function],
                  unsubscribe: [Function],
                  unlock: [Function],
                  unsubscribe: [Function],
                  all: [Function: all],
                  del: [Function],
                  render: [Function: render],
                  all: [Function: all],
                      { 'x-powered-by': true,
                  del: [Function],
                        etag: 'weak',
                  options: [Function],
                  subscribe: [Function],
                  request: IncomingMessage { app: [Circular] },
                  render: [Function: render],
                  search: [Function],
                  listen: [Function: listen],
                  response: ServerResponse { app: [Circular] },
                  post: [Function],
                  unbind: [Function],
                  cache: {},
                        'query parser': 'extended',
                        env: 'production',
                        'subdomain offset': 2,
                  engines: {},
                  listen: [Function: listen],
                        'trust proxy fn': [Function: trustNone],
                        'trust proxy': false,
                  request: IncomingMessage { app: [Circular] },
                   { settings: 
                        view: [Function: View],
                  proppatch: [Function],
                  unlock: [Function],
                  settings: 
                        views: '/app/views',
                     'trust proxy fn': [Function: trustNone],
                        'etag fn': [Function: wetag],
                     'jsonp callback name': 'callback',
                        'query parser fn': [Function: parseExtendedQueryString],
                   { 'x-powered-by': true,
                  response: ServerResponse { app: [Circular] },
                  cache: {},
                     etag: 'weak',
                     'etag fn': [Function: wetag],
                     env: 'production',
                  settings: 
                  engines: {},
                  mountpath: '/',
                  _router: 
                   { 'x-powered-by': true,
                     'query parser': 'extended',
                     'query parser fn': [Function: parseExtendedQueryString],
                     'subdomain offset': 2,
                     params: {},
                     'etag fn': [Function: wetag],
                     etag: 'weak',
                     'trust proxy fn': [Function: trustNone],
                          name: 'query',
                     _params: [],
                     caseSensitive: false,
                     env: 'production',
                          handle: [Function: query],
                     view: [Function: View],
                     mergeParams: undefined,
                     views: '/app/views',
                     'jsonp callback name': 'callback',
                     'view cache': true },
                     'query parser': 'extended',
                  _eventsCount: 1,
                          path: '',
                     strict: false,
                  locals: 
                     'trust proxy': false,
                     'query parser fn': [Function: parseExtendedQueryString],
                   { settings: 
                          keys: [],
                     'subdomain offset': 2,
                      { 'x-powered-by': true,
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                        etag: 'weak',
                     'trust proxy': false,
                          path: '',
                        'etag fn': [Function: wetag],
                        Layer {
                        'query parser': 'extended',
                          params: {},
                        'query parser fn': [Function: parseExtendedQueryString],
                        'subdomain offset': 2,
                        'trust proxy': false,
                     'trust proxy fn': [Function: trustNone],
                        'trust proxy fn': [Function: trustNone],
                     view: [Function: View],
                        view: [Function: View],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                        views: '/app/views',
                     views: '/app/views',
                        'view cache': true } },
                  _router: 
                   { [Function: router]
                          route: undefined },
                     params: {},
                        Layer {
                     'view cache': true },
                     'jsonp callback name': 'callback',
                        'jsonp callback name': 'callback',
                        'jsonp callback name': 'callback',
                     stack: 
                          handle: [Function: expressInit],
                     _params: [],
                        'view cache': true } },
                      [ Layer {
                          name: 'expressInit',
                  _eventsCount: 1,
                        env: 'production',
                  mountpath: '/',
                     mergeParams: undefined,
                     strict: false,
                          params: {},
                  locals: 
                   { [Function: router]
                          params: {},
                          keys: [],
                      [ Layer {
                   { settings: 
                          handle: [Function: query],
                          name: 'query',
                          path: '',
                          params: {},
                          path: '',
                          keys: [],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                          keys: [],
                      { 'x-powered-by': true,
                        Layer {
                        etag: 'weak',
                          route: undefined },
                     caseSensitive: false,
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                          route: undefined },
                        Layer {
                          name: 'expressInit',
                        'etag fn': [Function: wetag],
                          path: '',
                          handle: [Function: bound dispatch],
                          keys: [],
                     stack: 
                          handle: [Function: expressInit],
                        env: 'production',
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                          route: undefined },
                          name: 'bound dispatch',
                          params: {},
                        'query parser': 'extended',
                          name: 'urlencodedParser',
                          route: undefined },
                          handle: [Function: urlencodedParser],
                          name: 'urlencodedParser',
                          params: {},
                          path: '',
                          handle: [Function: urlencodedParser],
                        Layer {
                          params: {},
                          path: '/lmgtfy',
                          keys: [],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                        'query parser fn': [Function: parseExtendedQueryString],
                        'subdomain offset': 2,
                           Route {
                          route: undefined },
                          route: 
                             stack: 
                        'trust proxy': false,
                        Layer {
                              [ Layer {
                                  handle: [Function],
                          keys: [],
                          handle: [Function: bound dispatch],
                          name: 'bound dispatch',
                        'trust proxy fn': [Function: trustNone],
                          params: {},
                          regexp: { /^\/lmgtfy\/?$/i fast_star: false, fast_slash: false },
                          path: '/lmgtfy',
                        view: [Function: View],
                          keys: [],
                        views: '/app/views',
                                  method: 'post' } ],
                          regexp: { /^\/lmgtfy\/?$/i fast_star: false, fast_slash: false },
               connection: [Function: connectionListener] },
                                  regexp: { /^\/?$/i fast_star: false, fast_slash: false },
                        'jsonp callback name': 'callback',
                          route: 
            _eventsCount: 2,
            _maxListeners: undefined,
                           Route {
                        'view cache': true } },
                             path: '/lmgtfy',
                  mountpath: '/',
                             stack: 
                  _router: 
               fd: 10,
               owner: [Circular],
                              [ Layer {
               _externalStream: {},
               onread: null,
                   { [Function: router]
                             path: '/lmgtfy',
                             methods: { post: true } } } ] } },
               reading: false,
                                  name: '<anonymous>',
               onconnection: [Function: onconnection],
                     params: {},
                                  handle: [Function],
                                  params: undefined,
            _handle: 
                     _params: [],
                                  params: undefined,
                     caseSensitive: false,
                                  keys: [],
            _usingSlaves: false,
                     mergeParams: undefined,
                                  method: 'post' } ],
                             methods: { post: true } } } ] } },
            allowHalfOpen: true,
               connection: [Function: connectionListener] },
                     strict: false,
                                  path: undefined,
                     stack: 
            pauseOnConnect: false,
            _eventsCount: 2,
                                  path: undefined,
             TCP {
            _slaves: [],
                          handle: [Function: query],
                      [ Layer {
            _handle: 
                          name: 'query',
               bytesRead: 0,
                                  name: '<anonymous>',
            _connections: 1,
               writeQueueSize: 0 },
            timeout: 120000,
               fd: 10,
                                  keys: [],
               bytesRead: 0,
            _unref: false,
            httpAllowHalfOpen: false,
                                  regexp: { /^\/?$/i fast_star: false, fast_slash: false },
               _externalStream: {},
                          params: {},
               reading: false,
            _pendingResponseData: 0,
            domain: null,
                          path: '',
            _connectionKey: '6::::4799' },
               owner: [Circular],
         _server: 
               onread: null,
                          keys: [],
            _events: 
          Server {
            _maxListeners: undefined,
               onconnection: [Function: onconnection],
            _usingSlaves: false,
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                          route: undefined },
                          handle: [Function: expressInit],
                        Layer {
            _unref: false,
                          name: 'expressInit',
             { request: 
                { [Function: app]
                          params: {},
            pauseOnConnect: false,
                          path: '',
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
            httpAllowHalfOpen: false,
                          keys: [],
            _connections: 1,
               writeQueueSize: 0 },
                  _events: { mount: [Function: onmount] },
                          route: undefined },
            timeout: 120000,
             TCP {
            _slaves: [],
                        Layer {
                          handle: [Function: urlencodedParser],
                          params: {},
            _pendingResponseData: 0,
                          name: 'urlencodedParser',
            allowHalfOpen: true,
                  _maxListeners: undefined,
            _connectionKey: '6::::4799' },
                  setMaxListeners: [Function: setMaxListeners],
                  getMaxListeners: [Function: getMaxListeners],
                          keys: [],
                          path: '',
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
                        Layer {
                  addListener: [Function: addListener],
                          handle: [Function: bound dispatch],
                          route: undefined },
         _idleNext: 
                          name: 'bound dispatch',
                  domain: undefined,
                          params: {},
            _idleNext: [Circular],
                  once: [Function: once],
                  prependListener: [Function: prependListener],
                          keys: [],
                          path: '/lmgtfy',
                  removeListener: [Function: removeListener],
            _idlePrev: [Circular],
                  prependOnceListener: [Function: prependOnceListener],
                          route: 
            _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                          regexp: { /^\/lmgtfy\/?$/i fast_star: false, fast_slash: false },
                           Route {
                  removeAllListeners: [Function: removeAllListeners],
            _unrefed: true,
                  handle: [Function: handle],
                  listeners: [Function: listeners],
                             stack: 
            msecs: 120000,
                             path: '/lmgtfy',
                  lazyrouter: [Function: lazyrouter],
            nextTick: false },
         _idlePrev: 
                              [ Layer {
            _idleNext: [Circular],
                                  handle: [Function],
                                  path: undefined,
                                  name: '<anonymous>',
            _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                                  params: undefined,
            msecs: 120000,
                  listenerCount: [Function: listenerCount],
            nextTick: false },
                  route: [Function: route],
            _unrefed: true,
                                  keys: [],
                                  regexp: { /^\/?$/i fast_star: false, fast_slash: false },
         _idleStart: 2518,
                                  method: 'post' } ],
                  engine: [Function: engine],
         parser: 
               connection: [Function: connectionListener] },
            _eventsCount: 2,
                  param: [Function: param],
                             methods: { post: true } } } ] } },
                  set: [Function: set],
            _maxListeners: undefined,
                  enable: [Function: enable],
          TimersList {
            _idlePrev: [Circular],
         _idleTimeout: 120000,
          TimersList {
            '0': [Function: parserOnHeaders],
          HTTPParser {
                  emit: [Function: emit],
                  eventNames: [Function: eventNames],
                  path: [Function: path],
                  disable: [Function: disable],
            '2': [Function: parserOnBody],
            '1': [Function: parserOnHeadersComplete],
            _connections: 1,
             TCP {
                  on: [Function: addListener],
                  defaultConfiguration: [Function: defaultConfiguration],
                  disabled: [Function: disabled],
               _externalStream: {},
            _handle: 
            '3': [Function: parserOnMessageComplete],
                  bind: [Function],
               bytesRead: 0,
               fd: 10,
            _headers: [],
                  lock: [Function],
                  checkout: [Function],
                  connect: [Function],
               owner: [Circular],
            _url: '',
                  delete: [Function],
                  head: [Function],
                  link: [Function],
               onread: null,
               reading: false,
            _consumed: true,
                  use: [Function: use],
                  acl: [Function],
                  'm-search': [Function],
                  merge: [Function],
               onconnection: [Function: onconnection],
               writeQueueSize: 0 },
            socket: [Circular],
            _slaves: [],
            _usingSlaves: false,
            allowHalfOpen: true,
            outgoing: null,
            pauseOnConnect: false,
            incoming: [Circular],
                  mkactivity: [Function],
            _unref: false,
                  init: [Function: init],
                  enabled: [Function: enabled],
                  get: [Function],
                  mkcalendar: [Function],
            onIncoming: [Function: parserOnIncoming] },
         on: [Function: socketOnWrap],
            timeout: 120000,
            httpAllowHalfOpen: false,
            _pendingResponseData: 0,
            maxHeaderPairs: 2000,
         read: [Function],
                  move: [Function],
                  notify: [Function],
         _consuming: true,
         _httpMessage: [Circular] },
            _connectionKey: '6::::4799' },
      httpVersionMajor: 1,
         _idleTimeout: 120000,
         _idleNext: 
          TimersList {
                  post: [Function],
                  patch: [Function],
            '4': [Function: onParserExecute],
         _paused: false,
                  proppatch: [Function],
            _idleNext: [Circular],
      httpVersion: '1.1',
            _idlePrev: [Circular],
      complete: true,
      headers: 
            _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
                  purge: [Function],
            _unrefed: true,
       { host: 'slack-lmgtfy.herokuapp.com',
      httpVersionMinor: 1,
                  copy: [Function],
                  mkcol: [Function],
            msecs: 120000,
            nextTick: false },
                  propfind: [Function],
                  options: [Function],
                  put: [Function],
         _idlePrev: 
                  rebind: [Function],
          TimersList {
                  unbind: [Function],
                  report: [Function],
            _idleNext: [Circular],
         'accept-encoding': 'gzip,deflate',
                  trace: [Function],
            _idlePrev: [Circular],
         accept: 'application/json,*/*',
         'user-agent': 'Slackbot 1.0 (+https://api.slack.com/robots)',
         connection: 'close',
            _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
         'content-type': 'application/x-www-form-urlencoded',
            _unrefed: true,
            msecs: 120000,
         'x-forwarded-for': '54.209.231.248',
                  unlock: [Function],
            nextTick: false },
         _idleStart: 2518,
         'x-forwarded-proto': 'https',
         'x-request-id': 'd92796af-347a-4ee1-aeb1-020ad0b91696',
         parser: 
                  unsubscribe: [Function],
         'x-forwarded-port': '443',
         via: '1.1 vegur',
                  all: [Function: all],
          HTTPParser {
         'connect-time': '1',
                  render: [Function: render],
                  cache: {},
         'x-request-start': '1494222002355',
         'total-route-time': '0',
                  response: ServerResponse { app: [Circular] },
         'content-length': '299' },
      rawHeaders: 
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
                  del: [Function],
                  settings: 
       [ 'Host',
            '3': [Function: parserOnMessageComplete],
         'slack-lmgtfy.herokuapp.com',
         'Connection',
            _url: '',
         'close',
                   { 'x-powered-by': true,
            '4': [Function: onParserExecute],
            _headers: [],
         'User-Agent',
         'Slackbot 1.0 (+https://api.slack.com/robots)',
                     etag: 'weak',
         'Accept-Encoding',
                     env: 'production',
            socket: [Circular],
            _consumed: true,
            incoming: [Circular],
                     'subdomain offset': 2,
         'gzip,deflate',
            outgoing: null,
            maxHeaderPairs: 2000,
         'Accept',
                     'trust proxy': false,
         'application/json,*/*',
            onIncoming: [Function: parserOnIncoming] },
         'application/x-www-form-urlencoded',
         'd92796af-347a-4ee1-aeb1-020ad0b91696',
         'X-Request-Id',
         'X-Forwarded-For',
         on: [Function: socketOnWrap],
         _paused: false,
                     view: [Function: View],
         '54.209.231.248',
         _consuming: true,
         'X-Forwarded-Proto',
                     views: '/app/views',
         read: [Function],
         'https',
         _httpMessage: [Circular] },
                     'jsonp callback name': 'callback',
         'X-Forwarded-Port',
         '443',
      connection: 
                  _eventsCount: 1,
       Socket {
         connecting: false,
         '1.1 vegur',
         'Content-Type',
         'Via',
         _hadError: false,
         '1',
         'X-Request-Start',
         'Total-Route-Time',
            bytesRead: 786,
         _handle: 
         '0',
          TCP {
         'Content-Length',
         '299' ],
            _externalStream: {},
            fd: 11,
                      { 'x-powered-by': true,
            reading: true,
      rawTrailers: [],
                        etag: 'weak',
            onread: [Function: onread],
      url: '/lmgtfy',
      method: 'POST',
            owner: [Circular],
      statusMessage: null,
            onconnection: null,
                        env: 'production',
      client: 
         'Connect-Time',
      upgrade: false,
         _host: null,
            writeQueueSize: 0,
       Socket {
            _consumed: true },
         _parent: null,
          ReadableState {
         _readableState: 
         connecting: false,
                        'query parser': 'extended',
            objectMode: false,
                        'query parser fn': [Function: parseExtendedQueryString],
                  search: [Function],
                  listen: [Function: listen],
                     'query parser': 'extended',
                  locals: 
            length: 0,
            highWaterMark: 16384,
         '1494222002355',
      statusCode: null,
                  subscribe: [Function],
                  request: IncomingMessage { app: [Circular] },
                     'query parser fn': [Function: parseExtendedQueryString],
                   { settings: 
            bytesRead: 786,
            _externalStream: {},
            pipes: null,
            reading: true,
            pipesCount: 0,
                        'trust proxy': false,
            owner: [Circular],
                        'trust proxy fn': [Function: trustNone],
            onread: [Function: onread],
            flowing: true,
            onconnection: null,
      trailers: {},
         _hadError: false,
                        'jsonp callback name': 'callback',
            reading: true,
            endEmitted: false,
                  mountpath: '/',
                        views: '/app/views',
            sync: false,
                  _router: 
                   { [Function: router]
         _host: null,
            ended: false,
         _readableState: 
                     caseSensitive: false,
            readableListening: false,
                  unlink: [Function],
                  engines: {},
                     'trust proxy fn': [Function: trustNone],
                        'etag fn': [Function: wetag],
                        'view cache': true } },
                        view: [Function: View],
            objectMode: false,
         _handle: 
            _consumed: true },
            buffer: BufferList { head: null, tail: null, length: 0 },
            emittedReadable: false,
            resumeScheduled: false,
                     strict: false,
            highWaterMark: 16384,
                     stack: 
          TCP {
         _parent: null,
            defaultEncoding: 'utf8',
            buffer: BufferList { head: null, tail: null, length: 0 },
                          handle: [Function: query],
            ranOut: false,
            length: 0,
            awaitDrain: 0,
                          name: 'query',
                          params: {},
                      [ Layer {
            ended: false,
            decoder: null,
            readingMore: false,
            encoding: null },
            endEmitted: false,
            writeQueueSize: 0,
            pipes: null,
                     'etag fn': [Function: wetag],
                     'view cache': true },
                        'subdomain offset': 2,
                     params: {},
                          path: '',
                     _params: [],
                          keys: [],
            sync: false,
         domain: null,
            needReadable: true,
         _events: 
            emittedReadable: false,
            readableListening: false,
            awaitDrain: 0,
                          handle: [Function: expressInit],
          { end: 
                        Layer {
             [ { [Function: g] listener: [Function: onend] },
                          params: {},
            readingMore: false,
               [Function: socketOnEnd] ],
            encoding: null },
            finish: [Function: onSocketFinish],
         readable: true,
         domain: null,
         _events: 
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
            finish: [Function: onSocketFinish],
            drain: [ [Function: ondrain], [Function: socketOnDrain] ],
            _socketEnd: [Function: onSocketEnd],
            timeout: [Function],
            fd: 11,
          ReadableState {
            reading: true,
            decoder: null,
            close: 
            resumeScheduled: false,
          { end: 
                          path: '',
                          keys: [],
            needReadable: true,
         readable: true,
            error: [Function: socketOnError],
             [ [Function: serverSocketCloseListener],
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
            flowing: true,
            ranOut: false,
               [Function: socketOnEnd] ],
                          params: {},
                          route: undefined },
               [Function: onServerResponseClose] ],
                          name: 'urlencodedParser',
            data: [Function: socketOnData],
                          keys: [],
            pause: [Function: onSocketPause] },
            resume: [Function: onSocketResume],
                     mergeParams: undefined,
                          route: undefined },
                          handle: [Function: urlencodedParser],
         _maxListeners: undefined,
         _eventsCount: 10,
            pipesCount: 0,
            defaultEncoding: 'utf8',
             [ { [Function: g] listener: [Function: onend] },
         _writableState: 
                          regexp: { /^\/?(?=\/|$)/i fast_star: false, fast_slash: true },
            objectMode: false,
          WritableState {
                          route: undefined },
            highWaterMark: 16384,
                          handle: [Function: bound dispatch],
                          keys: [],
            needDrain: false,
                          route: 
            ending: false,
                          path: '/lmgtfy',
                           Route {
            finished: false,
            ended: false,
                             path: '/lmgtfy',
            decodeStrings: false,
            defaultEncoding: 'utf8',
                          name: 'expressInit',
                          path: '',
                          regexp: { /^\/lmgtfy\/?$/i fast_star: false, fast_slash: false },
            length: 0,
            writing: false,
            corked: 0,
                                  path: undefined,
                                  params: undefined,
            sync: true,
                              [ Layer {
            bufferProcessing: false,
            onwrite: [Function],
            writelen: 0,
                                  regexp: { /^\/?$/i fast_star: false, fast_slash: false },
            writecb: null,
            lastBufferedRequest: null,
            bufferedRequest: null,
                                  method: 'post' } ],
            pendingcb: 0,
                             methods: { post: true } } } ] } },
            errorEmitted: false,
            _eventsCount: 2,
            prefinished: false,
            bufferedRequestCount: 0,
            corkedRequestsFree: CorkedRequest { next: null, entry: null, finish: [Function] } },
                        Layer {
                             stack: 
               connection: [Function: connectionListener] },
             TCP {
                                  keys: [],
               _externalStream: {},
            _handle: 
         writable: true,
                        Layer {
                          name: 'bound dispatch',
                                  handle: [Function],
            _maxListeners: undefined,
               fd: 10,
         destroyed: false,
         allowHalfOpen: true,
               reading: false,
                          params: {},
                                  name: '<anonymous>',
            _connections: 1,
         _sockname: null,
         _bytesDispatched: 0,
               owner: [Circular],
         _pendingData: null,
               onread: null,
         server: 
         _pendingEncoding: '',
          Server {
            domain: null,
               onconnection: [Function: onconnection],
            _events: 
                { [Function: app]
             { request: 
                  _events: { mount: [Function: onmount] },
               writeQueueSize: 0 },
                  _maxListeners: undefined,
                  domain: undefined,
            _usingSlaves: false,
            _slaves: [],
            allowHalfOpen: true,
            pauseOnConnect: false,
            httpAllowHalfOpen: false,
            _pendingResponseData: 0,
               bytesRead: 0,
            _unref: false,
            _connectionKey: '6::::4799' },
         _idleNext: 
          TimersList {
            _idlePrev: [Circular],
            _idleNext: [Circular],
            _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
            _unrefed: true,
            nextTick: false },
            _idleNext: [Circular],
            timeout: 120000,
            msecs: 120000,
            _idlePrev: [Circular],
            _unrefed: true,
            msecs: 120000,
            nextTick: false },
         _idleStart: 2518,
         _idleTimeout: 120000,
          TimersList {
         parser: 
            '1': [Function: parserOnHeadersComplete],
            '0': [Function: parserOnHeaders],
            _timer: Timer { '0': [Function: listOnTimeout], _list: [Circular] },
         _idlePrev: 
          HTTPParser {
            '2': [Function: parserOnBody],
            '4': [Function: onParserExecute],
            _headers: [],
            _consumed: true,
            maxHeaderPairs: 2000,
            outgoing: null,
         on: [Function: socketOnWrap],
         _paused: false,
            _url: '',
            '3': [Function: parserOnMessageComplete],
            onIncoming: [Function: parserOnIncoming] },
            incoming: [Circular],
         read: [Function],
         _consuming: true,
         _httpMessage: [Circular] },
      _dumped: false,
      baseUrl: '',
      next: [Function: next],
      _parsedUrl: 
      originalUrl: '/lmgtfy',
       Url {
         protocol: null,
         auth: null,
         hash: null,
         query: null,
         hostname: null,
         pathname: '/lmgtfy',
         path: '/lmgtfy',
         _raw: '/lmgtfy' },
      body: 
      res: [Circular],
         team_id: 'T4HGA3GBH',
         team_domain: 'newkidscoolkids',
         slashes: null,
         href: '/lmgtfy',
         channel_id: 'D4GPCMPV1',
         channel_name: 'directmessage',
         response_url: 'https://hooks.slack.com/commands/T4HGA3GBH/179447402529/DMHsEQ1Dh9FYT3ISqduCN0sw' },
         text: 'test',
         user_id: 'U4GTZM7J9',
      length: undefined,
      read: [Function],
      route: 
         path: '/lmgtfy',
              name: '<anonymous>',
              handle: [Function],
              path: undefined,
              keys: [],
              regexp: { /^\/?$/i fast_star: false, fast_slash: false },
         methods: { post: true } } },
            socket: [Circular],
      _consuming: true,
         host: null,
      params: {},
         user_name: 'pmannarino',
         stack: 
   locals: {} }
         search: null,
       { token: 'se01XxU67hEd1saiG5rLugmH',
      _body: true,
              params: undefined,
         port: null,
      query: {},
         command: '/lmgtfy',
          [ Layer {
 obj contains 29 keys: domain,_events,_eventsCount,_maxListeners,output,outputEncodings,outputCallbacks,outputSize,writable,_last,upgrading,chunkedEncoding,shouldKeepAlive,useChunkedEncodingByDefault,sendDate,_removedHeader,_contentLength,_hasBody,_trailer,finished,_headerSent,socket,connection,_header,_headers,_headerNames,_onPendingData,req,locals
       Route {
              method: 'post' } ],
